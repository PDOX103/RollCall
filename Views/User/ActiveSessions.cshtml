@model List<RollCall.Models.AttendanceSession>
@{
    ViewData["Title"] = "Active Sessions";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="container my-4">
    <h2>Active Attendance Sessions</h2>

    @Html.AntiForgeryToken() <!-- for potential AJAX (not necessary for mark attendance form) -->
    @if (Model.Any())
    {
        <div class="list-group">
            @foreach (var session in Model)
            {
                var plannedIso = session.PlannedEndTime.HasValue ? session.PlannedEndTime.Value.ToString("o") : "";
                <div class="list-group-item mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-1">@session.Course.Name</h5>
                            <p class="mb-1">Started: @session.StartTime.ToLocalTime().ToString("g")</p>
                            @if (session.PlannedEndTime.HasValue)
                            {
                                <p class="mb-1">Planned End: @session.PlannedEndTime.Value.ToLocalTime().ToString("g")</p>
                            }
                        </div>

                        <div class="text-end">
                            <div id="countdown-student-@session.Id" data-session-id="@session.Id" data-planned="@plannedIso" data-active="@(session.IsActive.ToString().ToLower())" style="min-width:160px;">
                                @if (session.PlannedEndTime.HasValue)
                                {
                                    <small class="text-muted">Loading...</small>
                                }
                                else
                                {
                                    <small class="text-muted">No end time</small>
                                }
                            </div>

                            <form asp-action="MarkAttendance" method="post" class="d-inline mt-2">
                                <input type="hidden" name="sessionId" value="@session.Id" />
                                <button type="submit" class="btn btn-primary btn-sm" id="mark-btn-@session.Id">
                                    <i class="fas fa-check"></i> Mark Attendance
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state text-center py-5">
            <i class="fas fa-clock fa-3x mb-3"></i>
            <h5>No active sessions</h5>
            <p>Check back later for new attendance sessions.</p>
        </div>
    }
</div>

<script>
    (function () {
        function init(el) {
            const sessionId = el.dataset.sessionId;
            const plannedIso = el.dataset.planned;
            let plannedDate = plannedIso ? new Date(plannedIso) : null;
            let isActive = el.dataset.active === "true";
            let countdownTimer = null;
            let pollTimer = null;

            function stopAll() {
                if (countdownTimer) { clearInterval(countdownTimer); countdownTimer = null; }
                if (pollTimer) { clearInterval(pollTimer); pollTimer = null; }
            }

            async function fetchStatus() {
                try {
                    const resp = await fetch(`/User/SessionStatus?sessionId=${sessionId}`, { method: 'GET', cache: 'no-store' });
                    if (!resp.ok) return;
                    const j = await resp.json();
                    isActive = !!j.isActive;
                    if (j.plannedEndTime) plannedDate = new Date(j.plannedEndTime);

                    if (!isActive) {
                        el.innerHTML = '<span class="text-muted">Session ended</span>';
                        // disable mark button if present
                        const btn = document.getElementById('mark-btn-' + sessionId);
                        if (btn) { btn.disabled = true; btn.innerHTML = '<i class="fas fa-check"></i> Closed'; }
                        stopAll();
                    }
                } catch (e) {
                    console.warn('status fetch', e);
                }
            }

            function update() {
                if (!isActive) {
                    el.innerHTML = '<span class="text-muted">Session ended</span>';
                    const btn = document.getElementById('mark-btn-' + sessionId);
                    if (btn) { btn.disabled = true; btn.innerHTML = '<i class="fas fa-check"></i> Closed'; }
                    stopAll();
                    return;
                }
                if (!plannedDate) {
                    el.innerHTML = '<small class="text-muted">No end time set</small>';
                    return;
                }
                const now = new Date();
                const diff = plannedDate - now;
                if (diff <= 0) {
                    el.innerHTML = '<strong>Time remaining: 00:00:00</strong>';
                    const btn = document.getElementById('mark-btn-' + sessionId);
                    // server side will end it shortly via auto-end; disable the button
                    if (btn) { btn.disabled = true; btn.innerHTML = '<i class="fas fa-check"></i> Closed'; }
                    stopAll();
                    return;
                }
                const hours = Math.floor(diff / (1000 * 60 * 60));
                const minutes = Math.floor((diff / (1000 * 60)) % 60);
                const seconds = Math.floor((diff / 1000) % 60);
                el.innerHTML = `<strong>Time remaining:</strong> ${String(hours).padStart(2,'0')}:${String(minutes).padStart(2,'0')}:${String(seconds).padStart(2,'0')}`;
            }

            // init
            update();
            countdownTimer = setInterval(update, 1000);
            pollTimer = setInterval(fetchStatus, 5000);
        }

        document.querySelectorAll('[data-session-id]').forEach(init);
    })();
</script>
